#
# Application template.
#
# This defines all the configurable parameters and other objects that are needed to run the jHipster application
# service. This template can even be saved in OpenShift namespace as well so that have the flexibility to do any project specific
# customizations. Pls note wherever displayName says *** PLEASE DO NOT CHANGE THIS ***, don't touch that as those parameters will be
# referenced in other places.
#
apiVersion: v1
kind: Template
metadata:
  name: myapp-app-template
  namespace: drosapp
  annotations:
    description: This template defines objects that are required to spin up an myapp service pod
    tags: myapp, service
    openshift.io/display-name: myapp-template
    openshift.io/long-description: 'This template provides objects that are required to spin up a myapp service pod.'
    openshift.io/provider-display-name: JHipster
labels:
  app: myapp-app
  createdBy: JHipster-Team
parameters:
  - name: APPLICATION_NAME
    value: myapp
    description: Name of the application
    required: true
    displayName: Application Name
  - name: SECRET_REF
    value: myapp-ds-secret-ref
    description: Name of the DataSource Secret Reference
    required: true
    displayName: '*** PLEASE DO NOT CHANGE THIS ***'
  - name: REG_SECRET_REF
    value: reg-secret-ref
    description: Name of the Registry Secret Reference
    required: true
    displayName: '*** PLEASE DO NOT CHANGE THIS ***'
  - name: APP_PORT
    value: '8080'
    description: Port of the application
    required: true
    displayName: Application Port
objects:
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      name: ${APPLICATION_NAME}
    spec:
      strategy:
        type: Rolling
        rollingParams:
          updatePeriodSeconds: 1
          intervalSeconds: 1
          timeoutSeconds: 600
          maxUnavailable: 25%
          maxSurge: 25%
          pre:
            failurePolicy: ignore
            execNewPod:
              command:
                - '/bin/sh'
                - '-c'
                - |
                  while true
                  do
                    rt=$(nc -z -w 1 ${APPLICATION_NAME}-postgresqldb 80)
                    if [ $? -eq 0 ]; then
                      echo "DB is UP"
                      break
                    fi
                    echo "DB is not yet reachable;sleep for 10s before retry"
                    sleep 10
                  done
              containerName: ${APPLICATION_NAME}
        resources:
      replicas: 1
      template:
        metadata:
          labels:
            app: ${APPLICATION_NAME}
        spec:
          containers:
            - name: ${APPLICATION_NAME}
              image: drosapp/myapp
              imagePullPolicy: IfNotPresent
              env:
                - name: SPRING_PROFILES_ACTIVE
                  value: prod,swagger
                - name: SPRING_DATASOURCE_URL
                  value: jdbc:postgresql://${APPLICATION_NAME}-postgresqldb/${APPLICATION_NAME}
                - name: SPRING_DATASOURCE_USERNAME
                  valueFrom:
                    secretKeyRef:
                      name: ${SECRET_REF}
                      key: database-user
                - name: SPRING_DATASOURCE_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: ${SECRET_REF}
                      key: database-password
                - name: SPRING_DATA_JEST_URI
                  value: http://${APPLICATION_NAME}-elasticsearch:9200
                - name: SPRING_ELASTICSEARCH_REST_URIS
                  value: http://${APPLICATION_NAME}-elasticsearch:9200
                - name: JHIPSTER_METRICS_LOGS_ENABLED
                  value: 'true'
                - name: MANAGEMENT_METRICS_EXPORT_PROMETHEUS_ENABLED
                  value: 'true'
                - name: JHIPSTER_METRICS_PROMETHEUS_ENDPOINT
                  value: '/prometheusMetrics'
              ports:
                - name: http
                  containerPort: ${{APP_PORT}}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        service.alpha.openshift.io/dependencies: '[{
          "name":"${APPLICATION_NAME}-postgresqldb", "namespace": "", "kind": "Service"}]'
      labels:
        app: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      selector:
        app: ${APPLICATION_NAME}
      type: LoadBalancer
      ports:
        - name: http
          port: ${{APP_PORT}}
  - apiVersion: v1
    kind: Route
    metadata:
      name: ${APPLICATION_NAME}
    spec:
      to:
        kind: Service
        name: ${APPLICATION_NAME}
        weight: 100
      port:
        targetPort: 'http'
      wildcardPolicy: None
